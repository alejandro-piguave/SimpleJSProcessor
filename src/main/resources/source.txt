
let s string;

function FactorialRecursivo int (int n)	{
	if (n == 0)	return 1;
	return n * FactorialRecursivo (n - 1);	
}

let uno int = 1; // la inicialización es de implementación opcional
let UNO int= uno;
function salto string () {
    return '\n';
}

function FactorialDo int (int n){
	let factorial int = 0 + uno * 1;	// variable local inicializada a uno
	while(n != 0){
	    factorial *= n--;
	}
	// mientras n no sea 0
	return factorial;		// devuelve el valor entero de la variable factorial
}

function FactorialWhile int ()
{
	let factorial int = 1;	// variables locales: factorial inicializada a 1
	let i	int;			// variables locales: i inicializada a 0 por omisión
	while (i < num)	{		// num es variable global entera sin declarar

		factorial *= ++i;	// equivale a: i = i + 1; factorial = factorial * i;
	}
	return factorial;
}

function FactorialFor int (int n) {
	let i int;
	let factorial int = UNO;	
	for (i = 1; i <= n; i++)
	{
		factorial *= i;
	}
	return factorial;
}

let For int;
let Do int;
let While int;	// tres variables globales

function imprime (string s, string msg, int f) {
	print s;print msg ;print (f);
	print salto();	// imprime un salto de línea */
	return;	
}

function cadena string (boolean log) {
	if (!log) {return s;}
	else      {return 'Fin';}
} //fin cadena: función que devuelve una cadena


function bisiesto boolean (int a) {
	return (a % 4 == 0 && a % 100 != 0 || a % 400 == 0); //se tienen en cuenta la precedencia de operadores
} // fin de bisiesto: función lógica

function dias int (int m, int a) {
    if(m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12){
        return 31;
    } else if(m == 4 || m == 6 || m == 9 || m == 11){
        return 30;
    } else if(m == 2){
        return 28;
    } else {
        print 'Mes incorrecto'
        return 0;
    }
} // fin de dias. Todos los return devuelven un entero y la función es entera

function esFechaCorrecta boolean (int d, int m, int a) {
	return m>=1&&m<=12&&d>=1&&d<=dias(m,a);
} //fin de esFechaCorrecta

function imprimeSuma (int v, int w) {
	print v + w;
	print (salto());
} //fin de imprimeSuma

function potencia (int z, int dim) {
	let s int;	// Oculta a la global
	for (s=0; s < dim; s++)
	{
		z *= z;
		imprime ('Potencia:', ' ', z);
	}
} // fin de potencia: función que no devuelve nada

function demo () {
	let v1 int; let v2 int; let v3 int;
	let zv int ; // Variables locales

	print 'Escriba tres números: ';
	input v1; input v2; input v3;

	if (v3 == 0) return;

	if (!((v1 == v2) && (v1 != v3)))	
	{
		print 'Escriba su nombre: ';
		let s string;	// Oculta a la s global
		input s;
		if (v2 < v3)	
		{
			let  v0 int= v2; // se declara v0 aquí, por lo que se puede utilizar hasta el final de la función
		}
		else
		{
			v0= 1 / v3;
		}
		print s;
	}
	s = 'El primer valor era ';
	if (v1 != 0)
	{
		print (s); print v1; print '.\n';
	}
	else
	{
		print s; imprimeSuma (uno, -UNO); print ('.\n');
	}

	potencia (v0, 4);
	let i int;
	for (i=1; i <= 10; ++i)	{
		zv+=i;
	}
	potencia (zv, 5);
	imprimeSuma (i, num);
	imprime ('', cadena(true), 666);
}