NoTerminales = { P B F E S T C I X L Q R RI U UI V VI W H A K }
Terminales = { int boolean string let while ( ) { } print input return ; = |= , && == + - function id entero cadena booleano if }
Axioma = P

Producciones = {
P -> B P
P -> F P
P -> lambda

B -> if ( E ) S
B -> let id T ;
B -> S
B -> while ( E ) { C }

S -> id I ;
S -> print E ;
S -> input id ;
S -> return X ;

I -> = E
I -> |= E
I -> ( L )

L -> E Q
L -> lambda

Q -> , E Q
Q -> lambda

X -> E
X -> lambda

E -> R RI

RI -> && R RI
RI -> lambda

R -> U UI

UI -> == U UI
UI -> lambda

U -> V VI

VI -> + V VI
VI -> - V VI
VI -> lambda

V -> id W
V -> ( E )
V -> entero
V -> cadena
V -> booleano

W -> ( L )
W -> lambda

T -> int
T -> boolean
T -> string

F -> function id H ( A ) { C }

H -> T
H -> lambda

A -> T id K
A -> lambda

K -> , T id K
K -> lambda

C -> B C
C -> lambda
}